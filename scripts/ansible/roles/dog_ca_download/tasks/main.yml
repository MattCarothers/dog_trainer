---
- name: set ansible_os_family to debian for PopOs 
  set_fact: 
    ansible_os_family: 'Debian'
  when: ansible_os_family == 'Pop!_OS'
  connection: local
  delegate_to: 127.0.0.1

- name: detach from disk image
  command: hdiutil detach /tmp/dog/ca/
  become: no
  ignore_errors: yes
  connection: local
  delegate_to: 127.0.0.1
  when: ansible_os_family == "Darwin"

- name: delete ramdisk
  mount:
    path: /tmp/dog
    src: none
    fstype: ramfs
    opts: size=10m
    state: absent
  connection: local
  delegate_to: 127.0.0.1
  become: yes
  when: ansible_os_family == "Debian"

- name: remove /tmp/dog
  file: path=/tmp/dog state=absent
  become: no
  connection: local
  delegate_to: 127.0.0.1

- name: remove /tmp/ca/
  file: path=/tmp/ssl state=absent
  become: no
  connection: local
  delegate_to: 127.0.0.1

- name: remove /tmp/ca.dmg
  file: path=/tmp/ca.dmg state=absent
  become: no
  connection: local
  delegate_to: 127.0.0.1
  when: ansible_os_family == "Darwin"

- name: generate pass
  shell: /bin/date \+\%s | /usr/local/bin/shasum | /usr/local/bin/base64 | head -c 32 ; echo
  become: no
  register: uuid
  connection: local
  delegate_to: 127.0.0.1

- name: create /tmp/ca/
  file: path=/tmp/ca state=directory mode=0700
  become: no
  connection: local
  delegate_to: 127.0.0.1
  when: ansible_os_family == "Darwin"

- name: create /tmp/dog/
  file: path=/tmp/dog/ state=directory mode=0700
  become: no
  connection: local
  delegate_to: 127.0.0.1

- name: create encrypted disk image
  shell: echo -n "{{ uuid.stdout }}" | hdiutil create -encryption -stdinpass -srcfolder /tmp/ca -format UDRW -size 1mb /tmp/ca.dmg
  become: no
  connection: local
  delegate_to: 127.0.0.1
  when: ansible_os_family == "Darwin"

- name: mount disk image
  shell: echo -n "{{ uuid.stdout }}" | hdiutil attach -stdinpass -mountroot /tmp/dog -readwrite /tmp/ca.dmg
  connection: local
  delegate_to: 127.0.0.1
  when: ansible_os_family == "Darwin"

  #- name: create local /tmp/dog
  #  file: path=/tmp/dog state=directory mode=700
  #  when: ansible_os_family == "Debian"

- name: create ramdisk
  mount:
    path: /tmp/dog
    src: none
    fstype: ramfs
    opts: size=10m
    state: mounted
  become: yes
  connection: local
  delegate_to: 127.0.0.1
  when: ansible_os_family == "Debian"

    #- name: create ramdisk
    #  become: yes
    #  shell: mount -t ramfs -o size=10m ramfs /tmp/dog
    #  when: ansible_os_family == "Debian"

  #- name: create /tmp/dog/ssl
  #  file: path=/tmp/dog/ssl state=directory mode=0700
  #  become: no
  #  delegate_to: 127.0.0.1
  #
  #- name: create /tmp/dog/ca  
  #  file: path=/tmp/dog/ca state=directory mode=0700
  #  become: no
  #  delegate_to: 127.0.0.1
  #
- name: chown ramdisk
  file: path=/tmp/dog state=directory mode=700 owner="{{ lookup('env', 'USER') }}" group="{{ lookup('env', 'USER') }}"
  become: yes
  delegate_to: 127.0.0.1
  when: ansible_os_family == "Debian"

  #- name: chown ramdisk
  #  become: yes
  #  command: chown -R "{{ lookup('env', 'USER') }}:" /tmp/dog
  #  when: ansible_os_family == "Debian"

- name: create local /tmp/dog/ca
  file: path=/tmp/dog/ca state=directory mode=700 owner="{{ lookup('env', 'USER') }}" group="{{ lookup('env', 'USER') }}"
  become: yes
  connection: local
  delegate_to: 127.0.0.1
  when: ansible_os_family == "Debian"

- name: create local /tmp/dog/ssl
  file: path=/tmp/dog/ssl state=directory mode=700 owner="{{ lookup('env', 'USER') }}" group="{{ lookup('env', 'USER') }}"
  become: yes
  connection: local
  delegate_to: 127.0.0.1
  when: ansible_os_family == "Debian"

- name: set CN to inventory_hostname.dog
  set_fact: 
    cn: "{{ inventory_hostname }}.dog"
  connection: local
  delegate_to: 127.0.0.1

  #- name: create ssl conf
  #  template: dest=/tmp/dog/ssl/ssl.conf src=templates/ssl.conf.j2
  #  delegate_to: 127.0.0.1

- name: create /tmp/dog/ssl/certindex
  file: path=/tmp/dog/ssl/certindex state=touch
  become: no
  connection: local
  delegate_to: 127.0.0.1

- name: serial line
  lineinfile: dest=/tmp/dog/ssl/serial create=yes regexp="^000a$" line="000a"
  become: no
  connection: local
  delegate_to: 127.0.0.1

- name: add extended keyusage to openssl config
  lineinfile: dest=/usr/local/etc/openssl/openssl.cnf line="extendedKeyUsage=serverAuth,clientAuth" regexp="^extendedKeyUsage=(.*)" create=yes
  become: no
  connection: local
  delegate_to: 127.0.0.1
  when: ansible_os_family == "Darwin"

- name: add extended keyusage to openssl config
  lineinfile: dest=/etc/ssl/openssl.cnf line="extendedKeyUsage=serverAuth,clientAuth" regexp="^extendedKeyUsage=(.*)" create=yes
  connection: local
  delegate_to: 127.0.0.1
  become: true
  when: ansible_os_family == "Debian"

- name: get root key from credstash
  shell: echo "{{ lookup('credstash', 'dog-private.pem', table='credential-store', region='us-east-1') }}" > /tmp/dog/ca/private.pem 
  become: no
  connection: local
  delegate_to: 127.0.0.1

- name: get root cert from credstash
  shell: echo "{{ lookup('credstash', 'dog-root.cer', table='credential-store', region='us-east-1') }}" > /tmp/dog/ca/dog-root.cer
  become: no
  connection: local
  delegate_to: 127.0.0.1
